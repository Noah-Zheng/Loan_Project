library(ggplot2)
data(diamonds)
summary(diamonds)
names(diamonds)
levels(diamonds)
str(dismonds)
str(diamonds)
levels(diamonds$color)
?diamonds
#histgram of price
qplot(x=price, data=diamonds)
mean(diamonds$price)
length(diamonds[diamonds$price < 500])
length(diamonds$price < 500)
length(subset(diamonds, diamonds$price < 500))
length(subset(diamonds, diamonds$price < 250))
length(subset(diamonds, diamonds$price < 15000))
Less500 <- subset(diamonds, diamonds$price < 500)
less250 <- subset(diamonds, diamonds$price < 250)
less15000 <- subset(diamonds, diamonds$price < 15000)
?length
length(diamonds$price)
length(less500$price)
length(Less500$price)
length(less250$price)
View(diamonds)
less15000 <- subset(diamonds, diamonds$price >= 15000)
#histgram of price
qplot(x=price, data=diamonds)
#explore the largest peak in teh price histogram
qplot(x = price, data = diamonds) +
scale_x_continuous(limits = c(1,2500), breaks = seq(1,2500,50))
#explore the largest peak in teh price histogram
qplot(x = price, data = diamonds) +
scale_x_continuous(limits = c(1,1500), breaks = seq(1,1500,50))
ggsave('pricepeakhistgram.png')
ggsave('pricepeakhistgram.png')
#explore the largest peak in teh price histogram
qplot(x = price, data = diamonds) +
scale_x_continuous(limits = c(1,1700), breaks = seq(1,1700,50))
#explore the largest peak in teh price histogram
qplot(x = price, data = diamonds) +
scale_x_continuous(limits = c(1,1700), breaks = seq(1,1700,50)) +
stat_bin(aes(y=..count.., label=..count..), geom='text', vjust=-.5)
library(gridExtra)
p1 <- qplot(x = price, data = subset(diamonds, cut))
# frequency polygon
qplot(x = friend_count, data = subset(df, !is.na(gender)),
binwidth = 10, geom = "freqpoly", color = gender) +
scale_x_continuous(limits = c(0,1000), breaks = seq(0,1000,50))
df <- read.csv('pseudo_facebook.tsv', sep = '\t')
ggplot(diamonds, aes(x = price)) +
geom_histogram() +
facet_grid(~cut)
ggplot(diamonds, aes(x = price)) +
geom_histogram() +
facet_wrap(~cut)
ggplot(diamonds, aes(x = price)) +
geom_histogram() +
facet_grid(~cut)
ggplot(diamonds, aes(x = price)) +
geom_histogram() +
facet_wrap(~cut)
by(diamonds$price, diamonds$cut, summary)
```{r}
library(ggplot2)
data(diamonds)
summary(diamonds)
ggplot(diamonds, aes(x = price)) +
geom_histogram() +
facet_wrap(~cut)
by(diamonds$price, diamonds$cut, summary)
?facet_wrap
ggplot(diamonds, aes(x = price)) +
geom_histogram() +
facet_wrap(~cut, scales = "free_y")
ggplot(diamonds, aes(x = price/carat)) +
geom_histogram() +
facet_wrap(~cut) +
scale_x_log10()
ggplot(diamonds, aes(x = price/carat)) +
geom_histogram() +
facet_wrap(~cut, scales = "free_y") +
scale_x_log10()
?ls
library()
search()
data(diamonds)
?diamonds
head(dd)
dd <- read.csv("diamondsbig.csv")
names(dd)
head(dd)
ggplot(dd, aes(price,x)) +
geom_point()
library(ggplot2)
ggplot(dd, aes(price,x)) +
geom_point()
ggplot(dd, aes(x,price)) +
geom_point()
ggplot(dd, aes(x,price)) +
geom_point(alpha = 0.05, position = position_jitter())
cor.test(dd$x, dd$price)
cor.test(dd$y, dd$price)
cor.test(dd$z, dd$price)
#price vs depth
ggplot(dd, aes(depth, price)) +
geom_point(alpha = .05, position = position_jitter())
range(dd$depth)
#price vs depth
ggplot(dd, aes(depth, price)) +
geom_point(alpha = .001, position = position_jitter())+
scale_x_continuous(breaks = c(0,82,2))
#price vs depth
ggplot(dd, aes(depth, price)) +
geom_point(alpha = .001)+
scale_x_continuous(breaks = c(0,82,2))
#price vs depth
ggplot(dd, aes(depth, price)) +
geom_point(alpha = .001)+
scale_x_continuous(breaks = seq(0,82,2))
#price vs depth
ggplot(dd, aes(depth, price)) +
geom_point(alpha = .001, position = position_jitter())+
scale_x_continuous(breaks = seq(0,82,2))
# scale_x_continuous(breaks = seq(0,82,2))
#price vs depth
ggplot(dd, aes(depth, price)) +
geom_point(alpha = .001, position = position_jitter()) #+
# scale_x_continuous(breaks = seq(0,82,2))
#price vs depth
ggplot(dd, aes(depth, price)) +
geom_point(alpha = 1/100, position = position_jitter()) #+
# scale_x_continuous(breaks = seq(0,82,2))
#price vs depth
ggplot(dd, aes(depth, price)) +
geom_point(alpha = 1/100, position = position_jitter()) +
scale_x_continuous(breaks = seq(0,82,2))
cor.test(dd$depth, dd$price)
cor.test(subset(dd, dd$depth >60 & dd$depth < 70), dd$price)
cor.test(subset(dd, dd$depth >60 & dd$depth < 70)$depth, dd$price)
cor.test(dd$price, dd$depth)
range(dd$price)
summary(dd)
ggplot(dd, aes(carat, price)) +
geom_point() +
xlim(0.2, quantile(carat, .99)) +
ylim(200, quantile(price, .99))
ggplot(dd, aes(carat, price)) +
geom_point() +
xlim(0.2, quantile(dd$carat, .99)) +
ylim(200, quantile(dd$price, .99))
?quantile
ggplot(dd, aes(carat, price)) +
geom_point() +
xlim(0.2, quantile(dd$carat, .99)) +
ylim(200, quantile(dd$price, .99, na.rm = TRUE))
#price v volume
dd$volume <- dd$x * dd$y * dd$z
ggplot(dd, aes(volume, price)) +
geom_line()
ggplot(dd, aes(volume, price)) +
geom_point()
count(dd$volume == 0)
cor.test(dd$volume, dd$price)
s1 <- subset(dd, volume != 0 & volume >= 800)
cor.test(s1$volume, s1$price)
cor.test(s1$price,s1$volume)
s1 <- subset(dd, volume != 0 & volume <= 800)
cor.test(s1$price,s1$volume)
cor.test(s1$volume, s1$price)
ggplot(s1, aes(volume, price)) +
geom_point(alpha = 1/100) +
geom_smooth(method = 'lm')
library(dplyr)
d_by_clarity <- dd %>%
group_by(clarity) %>%
summarise(mean_price = mean(price),
median_price = median(price),
min_price = min(price),
max_price = max(price),
n = n()) %>%
arrange(clarity)
View(d_by_clarity)
View(dd)
library(ggplot2)
diamonds
dd <- diamonds
summary(dd$carat)
summary(dd$price)
ggplot(dd, aes(carat,price)) +
geom_point(alpha = 0.05, position = position_jitter()) +
xlim(0, quantile(dd$carat, .99)) +
ylim(300, quantile(dd$price, .99))
ggplot(dd, aes(carat,price)) +
geom_point(alpha = 0.05, position = position_jitter()) +
xlim(0, quantile(dd$carat, .99)) +
ylim(300, quantile(dd$price, .99)) +
stat_smooth(method = 'lm')
# install these if necessary
install.packages('GGally')
install.packages('scales')
install.packages('memisc')
install.packages('lattice')
install.packages('MASS')
install.packages('car')
install.packages('reshape')
install.packages('plyr')
# load the ggplot graphics package and the others
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
# sample 10,000 diamonds from the data set
set.seed(20022012)
diamond_samp <- diamonds[sample(1:length(diamonds$price), 10000), ]
ggpairs(diamond_samp, params = c(shape = I('.'), outlier.shape = I('.')))
install.packages("scales")
install.packages("plyr")
install.packages("plyr")
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
install.packages('lattice')
install.packages("lattice")
library(ggplot2)
library(GGally)
library(scales)
library(memisc)
install.packages('MASS')
install.packages("MASS")
library(gridExtra)
p1 <- qplot(data = dd, x = price) +
ggtitle('Price')
p2 <- qplot(data = dd, x = log(price)) +
ggtitle('Price(log10)')
grid.arrange(p1,p2, ncol = 1)
library(gridExtra)
p1 <- qplot(data = dd, x = price) +
ggtitle('Price')
p2 <- qplot(data = dd, x = log(price)) +
ggtitle('Price(log10)')
grid.arrange(p1,p2, ncol = 1)
library(gridExtra)
p1 <- qplot(data = dd, x = price) +
ggtitle('Price')
p2 <- qplot(data = dd, x = log(price)) +
ggtitle('Price(log10)')
grid.arrange(p1,p2, ncol = 1)
library(gridExtra)
p1 <- qplot(data = dd, x = price) +
ggtitle('Price')
p2 <- qplot(data = dd, x = log(price)) +
ggtitle('Price(log10)')
grid.arrange(p1,p2, ncol = 1)
p1 <- qplot(data = dd, x = price) +
ggtitle('Price')
library(ggplot2)
library(ggplot2)
?qplot
library(ggplot2)
install.packages('ggplot2')
library(ggplot2)
library(gridExtra)
p1 <- qplot(data = dd, x = price) +
ggtitle('Price')
dd <- diamonds
p1 <- qplot(data = dd, x = price) +
ggtitle('Price')
p2 <- qplot(data = dd, x = log(price)) +
ggtitle('Price(log10)')
grid.arrange(p1,p2, ncol = 1)
library(ggplot2)
library(gridExtra)
p1 <- qplot(data = dd, x = price, binwidth = 100) +
ggtitle('Price')
p2 <- qplot(data = dd, x = log(price), binwidth = 100) +
ggtitle('Price(log10)')
grid.arrange(p1,p2, ncol = 1)
library(ggplot2)
library(gridExtra)
p1 <- qplot(data = dd, x = price, binwidth = 100) +
ggtitle('Price')
p2 <- qplot(data = dd, x = log(price), binwidth = 0.01) +
ggtitle('Price(log10)')
grid.arrange(p1,p2, ncol = 1)
p3 <- qplot(data = dd, x = price, binwidth = 0.01) +
scale_x_log10()
grid.arrange(p1,p2,p3, ncol = 1)
p1 <- qplot(data = dd, x = price, binwidth = 100, col = 258) +
ggtitle('Price')
grid.arrange(p1,p2,p3, ncol = 1)
p2 <- qplot(data = dd, x = log(price), binwidth = 0.01, col = 515) +
ggtitle('Price(log10)')
grid.arrange(p1,p2,p3, ncol = 1)
p2 <- qplot(data = dd, x = log(price), binwidth = 0.01, col = 448) +
ggtitle('Price(log10)')
grid.arrange(p1,p2,p3, ncol = 1)
p1 <- qplot(data = dd, x = price, binwidth = 100, color = 455) +
ggtitle('Price')
grid.arrange(p1,p2,p3, ncol = 1)
p1 <- qplot(data = dd, x = price, binwidth = 100) +
ggtitle('Price')
p2 <- qplot(data = dd, x = log(price), binwidth = 0.01) +
ggtitle('Price(log10)')
grid.arrange(p1,p2,p3, ncol = 1)
?scale_x_continuous
?scale_x_continuous()
?log10_trans
library(ggplot2)
diamonds
?scale_y_countious
?scale_y_continuous
dd <- diamonds
qplot(carat, price, data = dd) +
scale_y_continuous(trans = "log10")
?cuberot
?cuberoot
?table
head(sort(table(dd$carat), decreasing = T))
head(sort(table(dd$price), decreasing = T))
?geom_point
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
ggplot(aes(carat, price), data = diamonds) +
geom_point() +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = 1/100, size = I(.5), position = position_jitter()) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
cuberoot_trans = function() trans_new('cuberoot', transform = function(x) x^(1/3),
inverse = function(x) x^3)
View(cuberoot_trans)
ggplot(aes(carat, price), data = diamonds) +
geom_point(alpha = 1/100, size = I(.5), position = position_jitter()) +
scale_x_continuous(trans = cuberoot_trans(), limits = c(0.2, 3),
breaks = c(0.2, 0.5, 1, 2, 3)) +
scale_y_continuous(trans = log10_trans(), limits = c(350, 15000),
breaks = c(350, 1000, 5000, 10000, 15000)) +
ggtitle('Price (log10) by Cube-Root of Carat')
m1 <- lm(I(log(price)) ~ I(carat^(1/3)), data = diamonds)
m2 <- update(m1, ~ . + carat)
m3 <- update(m2, ~ . + cut)
m4 <- update(m3, ~ . + color)
m5 <- update(m4, ~ . + clarity)
mtable(m1, m2, m3, m4, m5)
?table
?mtable
View(m1)
m1
m2
predict
?predict
View(m4)
?with
?sd
dat = data.frame(m4$model, m4$residuals)
with(dat, sd(m4.residuals))
with(subset(dat, carat > .9 & carat < 1.1), sd(m4.residuals))
View(dat)
dat$resid <- as.numeric(dat$m4.residuals)
ggplot(aes(y = resid, x = round(carat, 2)), data = dat) +
geom_line(stat = "summary", fun.y = sd)
?round
head(round(dat$carat, 2))
dd <- read.csv("prosperLoanData.csv")
str(dd)
head(dd)
setwd("C:/Users/Noah/Desktop/Project")
dd <- read.csv("prosperLoanData.csv")
str(dd)
head(dd)
summary(dd$ListingCreationDate)
str(dd$ListingCreationDate)
summary(dd$LoanOriginationDate)
range(dd$LoanOriginationDate)
#Select data, trim the date with only date
col_index <- c(5,6,7,11,16,17,18,19,29,33,36,37,39,65,66,82)
dd_s <- dd[, col_index]
View(dd)
dd_s <- dd[, 5，6，7]
dd_s <- dd[, (5，6，7)]
dd_s <- dd[, c(5，6，7)]
dd_s <- dd[col_index, ]
View(dd_s)
dd_s <- dd[ , col_index]
library(dplyr)
dd2 <- dd %>% select(,col_index)
dd2 <- dd %>% select(1,col_index)
dd2 <- dd %>% select( , c(5,6,7,11,16,17,18,19,29,33,36,37,39,65,66,82))
dd2 <- dd[, c(5,6,7,11,16,17,18,19,29,33,36,37,39,65,66,82)]
dd2 <- dd[, c(5,82)]
dd2 <- dd[, c(2,8)]
dd2 <- dd[, c(2,8,90)]
dd2 <- dd[, c(2,8,81)]
dd2 <- dd[, c(5,6,7)]
View(dd2)
col_index <- col_index - 1
dd_s <- dd[, col_index]
rm(dd2)
View(dd_s)
summary(dd_s)
